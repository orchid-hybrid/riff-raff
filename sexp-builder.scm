(define (build-sexp t s r)
  (cond ((null? s)
         (list
          `(declare (struct scm) ,r)
          `(set! ,r (make-struct (struct scm)
                                 (t scm-nil)))))
        ((number? s)
         (list
          `(declare (struct scm) ,r)
          `(set! ,r (make-struct (struct scm)
                                 (t scm-int)
                                 (v.i ,s)))))
        ((symbol? s)
         (list
          `(declare (struct scm) ,r)
          `(set! ,r (make-struct (struct scm)
                                 (t scm-sym)
                                 (v.i ,(lookup-symbol-table t s))))))
        ((pair? s)
         (let ((a (gensym "car"))
               (b (gensym "cdr")))
           (append (build-sexp t (car s) a)
                   (build-sexp t (cdr s) b)
                   (list `(declare (struct scm) ,r)
                         `(set! ,r (make-struct (struct scm)
                                                (t scm-pair)
                                                (v.p (malloc (sizeof (struct scm-pair))))))
                         `(set! (struct->ref (struct-ref (struct-ref ,r v) p) ref) 1)
                         `(set! (struct->ref (struct-ref (struct-ref ,r v) p) car) ,a)
                         `(set! (struct->ref (struct-ref (struct-ref ,r v) p) cdr) ,b)))))))

